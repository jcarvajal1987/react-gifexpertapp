{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAoB7C,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACtCN,EAAc,MAQlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAtBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCDPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECEX,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KA2BxC,OApBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGd,UAIb,CAAEpB,IAIGqB,ED3B0BM,CAAc3B,GAAlCa,EAFsB,EAE3BN,KAAaa,EAFc,EAEdA,QAGrB,OACI,qCACI,6BAAMpB,IAEJoB,GAAW,cAEb,qBAAKJ,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADEA,EAAIC,aEf7BiB,EAAe,WAAO,IAAD,EAEI1C,mBAAS,CAAC,cAFd,mBAEzB2C,EAFyB,KAEb5C,EAFa,KAIhC,OACA,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI4C,EAAWpB,KAAK,SAACT,EAAS8B,GAAV,OACd,cAAC,EAAD,CAEE9B,SAAWA,GADNA,YCbjB+B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b180801b.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories}) => {\n\n    const[inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputValue.trim().length > 2 ){\n            setCategories( cats => [inputValue,...cats]);\n            setInputValue('');\n\n        }\n\n\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            \n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\n\nexport const getGifs = async( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=wTfZf3V7yZ1euIFg7vgSFPAEGAQ8EuWT`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { title, url } ) => {\n\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n\n    return (\n        <>\n            <h3>{ category }</h3>\n\n            { loading && 'cargando...'}\n\n            <div className=\"card-grid\">\n                \n                    {\n                        images.map( img => (\n                            <GifGridItem\n                                key={ img.id }\n                                {...img}\n                            />\n                        ))\n                    }\n\n            </div>\n        </>\n    )\n\n}","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( ()=> {\n\n        getGifs( category )\n            .then( imgs => {\n\n                setTimeout(() => {\n                    \n                    setState({\n                        data: imgs,\n                        loading: false\n                    })\n\n                }, 3000);\n\n            })\n\n    },[ category ])\n\n\n\n    return state;\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\nexport const GifExpertApp = () => {\n\n  const [categories, setCategories] = useState(['One Punch'])\n\n  return (\n  <>\n    <h2>GifExpertApp</h2>\n    <AddCategory setCategories={setCategories} />\n    <hr />\n\n    <ol>\n      {\n        categories.map( (category,i) => \n          <GifGrid \n            key={category}\n            category ={category}/>\n        )\n      }\n    </ol>\n\n </>\n  )\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}